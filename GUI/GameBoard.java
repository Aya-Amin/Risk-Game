/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package GUI;

import AI.AStarPlayer;
import GameEngine.Bridge;
import GameEngine.Controller;
import GameEngine.HumanAgent;
import GameEngine.Map;
import GameEngine.PacifistHumanAgent;
import GameEngine.Player;
import GameEngine.Territory;
import com.teamdev.jxbrowser.chromium.Browser;
import com.teamdev.jxbrowser.chromium.JSArray;
import com.teamdev.jxbrowser.chromium.JSValue;
import com.teamdev.jxbrowser.chromium.events.ScriptContextAdapter;
import com.teamdev.jxbrowser.chromium.events.ScriptContextEvent;
import com.teamdev.jxbrowser.chromium.swing.BrowserView;
import java.util.ArrayList;
import java.util.concurrent.ExecutionException;
import java.util.concurrent.Future;
import java.util.logging.Level;
import java.util.logging.Logger;

/**
 *
 * @author Omar
 */
public class GameBoard extends javax.swing.JFrame
{

    
    
    //*****************************************************
    //PREDEFINES for the game State
    private final int DEOPLOYMENT = 0;
    private final int CHOOSEATTACKER = 1;
    private final int CHOOSEDEFENDER = 2;
    private final int CHOOSETOMOVEFROM = 3;
    private final int CHOOSETOMOVETO = 4;
    //*****************************************************
    
    private final Browser browser;
    private final BrowserView browserview;
    private static GameBoard gameboard;
    private ArrayList<Territory> territoriesList;

    public static GameBoard getGameboard()
    {
        return gameboard;
    }

    public static void setGameboard(GameBoard gameboard)
    {
        GameBoard.gameboard = gameboard;
    }

    public ArrayList<Territory> getTerritoriesList()
    {
        return territoriesList;
    }
    private ArrayList<Player> players;

    public static GameBoard getInstance()
    {
        if (gameboard == null)
        {
            return new GameBoard();
        } else
        {
            return gameboard;
        }
    }

    private GameBoard()
    {
        gameboard = this;
        initComponents();
        browser = new Browser();
        browserview = new BrowserView(browser);
        loadRiskMap();

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents()
    {

        browserPanel = new javax.swing.JPanel();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setUndecorated(true);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        browserPanel.setBackground(new java.awt.Color(51, 51, 51));
        browserPanel.setPreferredSize(new java.awt.Dimension(830, 550));
        browserPanel.setLayout(new java.awt.CardLayout());
        getContentPane().add(browserPanel, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 40, 780, 560));

        jLabel1.setText("Player Name:");

        jButton1.setText("jButton1");
        jButton1.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                jButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 438, Short.MAX_VALUE)
                .addComponent(jButton1)
                .addGap(295, 295, 295))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jButton1)
                    .addComponent(jLabel1))
                .addContainerGap(66, Short.MAX_VALUE))
        );

        getContentPane().add(jPanel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 620, 880, -1));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_jButton1ActionPerformed
    {//GEN-HEADEREND:event_jButton1ActionPerformed
        JSValue document = browser.executeJavaScriptAndReturnValue("document");
        JSValue async = document.asObject().getProperty("getTerritories");
        Future<JSValue> jsResults = async.asFunction().invokeAsync(document.asObject());
        
        
        
        try
        {
            JSArray array = jsResults.get().asArray();

            for (int i = 0; i < array.length(); i++)
            {
                Territory territory = new Territory(array.get(i).toString());

                territoriesList.add(territory);
            }
            System.out.println("Territories size are: "+territoriesList.size());
        } catch (InterruptedException ex)
        {

        } catch (ExecutionException ex)
        {
        }
        
        Map map = new Map(territoriesList);
        
        String[] neighboursArray;
        Territory territory;
        int count = territoriesList.size();
        
        JSValue jsNeighbours = document.asObject().getProperty("getNeighbours");
        Future<JSValue> jsNeighboursResult;
        for (int i = 0; i <count ; i++)
        {
            territory = territoriesList.get(i);
            
            jsNeighboursResult = jsNeighbours.asFunction().invokeAsync(document.asObject(), territory.getTerritoryID());
            try
            {    
                String result = jsNeighboursResult.get().asString().getStringValue();
                System.out.println(result);
                neighboursArray = result.split("-");
               
                int size = neighboursArray.length;
                System.out.println("For "+territory.getTerritoryID()+" Neighbours are ");
                for(int j=0;j<size;j++)
                {  
                territory.addAdjacentTerritory(map.getTerritoryByID(neighboursArray[j]));
                System.out.println(map.getTerritoryByID(neighboursArray[j]).getTerritoryID());
                }
            } catch (InterruptedException ex)
            {
                Logger.getLogger(GameBoard.class.getName()).log(Level.SEVERE, null, ex);
            } catch (ExecutionException ex)
            {
                Logger.getLogger(GameBoard.class.getName()).log(Level.SEVERE, null, ex);
            }
            }

        Controller controller;
        try
        {
            controller = Controller.getInstance(map);
            controller.addPlayer(new AStarPlayer("AStar"));
            controller.addPlayer(new PacifistHumanAgent("Pacifist12"));
            controller.addPlayer(new HumanAgent("Omar3"));
            controller.initialDeployment();
        } catch (CloneNotSupportedException ex)
        {
            Logger.getLogger(GameBoard.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        
       

        // TODO add your handling code here:
    }//GEN-LAST:event_jButton1ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) throws CloneNotSupportedException
    {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try
        {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels())
            {
                if ("Nimbus".equals(info.getName()))
                {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex)
        {
            java.util.logging.Logger.getLogger(GameBoard.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex)
        {
            java.util.logging.Logger.getLogger(GameBoard.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex)
        {
            java.util.logging.Logger.getLogger(GameBoard.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex)
        {
            java.util.logging.Logger.getLogger(GameBoard.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable()
        {
            public void run()
            {
                new GameBoard().setVisible(true);
            }
        });

        Bridge bridge = Bridge.getInstance();
    }

    public Browser getBrowser()
    {
        return browser;
    }

    public BrowserView getBrowserview()
    {
        return browserview;
    }

    private void loadRiskMap()
    {

        browser.loadURL("O:\\Term 7\\AI\\Assignments\\Assignment2 RISK GAME\\USA Map\\us.html");
        browserPanel.add(browserview);
        territoriesList = new ArrayList<>();
        browser.addScriptContextListener(new ScriptContextAdapter()
        {
            @Override
            public void onScriptContextCreated(ScriptContextEvent event)
            {
                try
                {
                    Browser browser = event.getBrowser();
                    JSValue window = browser.executeJavaScriptAndReturnValue("window");
                    window.asObject().setProperty("java", Bridge.getInstance());
                } catch (CloneNotSupportedException ex)
                {
                    Logger.getLogger(GameBoard.class.getName()).log(Level.SEVERE, null, ex);
                }

            }
        });

    }

    public ArrayList<Player> getPlayers()
    {
        return players;
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel browserPanel;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    // End of variables declaration//GEN-END:variables
}
